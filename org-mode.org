#+TITLE: Org Mode - Organize Your Life In Plain Text!
#+LANGUAGE:  en
#+AUTHOR: Bernt Hansen
#+EMAIL: bernt@norang.ca
#+OPTIONS:   H:3 num:t   toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+DESCRIPTION: A description of how I currently use org-mode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done
#+SEQ_TODO: FOO | BAR
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
* Overview
This is currently a work-in-progress.

Org-mode is a fabulous organizational tool built by Carsten Dominik that operates on plain text files.
Org-mode is part of Emacs.

This document attempts to describe how I use org-mode in my day-to-day
work.  I have been using org-mode as my personal information manager
for years now.  I started small with just the default =TODO= and
=DONE= keywords and grew my use of org-mode to fit my workflow.

I still change my workflow and tweak little things regularly but right
now this document describes most of my current org-mode setup.

I'm assuming you've had some exposure to org-mode already so concepts like the agenda, remember mode, etc.
won't be completely foreign to you.  More information about org-mode can be found in the [[http://orgmode.org/index.html#sec-4.1][Org-Mode Manual]] and on the 
[[http://orgmode.org/worg/][Worg Site]].
* Org-Mode Setup
I have the following setup in my .emacs so that org-mode is enabled.
I use org-mode as the default mode for =.org=, =*.org_archive=, and
=*.txt= files.

#+begin_src lisp
;;;
;;; Org Mode
;;;
(add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org-install)
;;
;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

I also use orgstruct++-mode and flyspell-mode when composing email messages in Gnus.

#+begin_src lisp
(setq message-mode-hook (quote (orgstruct++-mode 
				(lambda nil (setq fill-column 72) (flyspell-mode 1))
				turn-on-auto-fill
				bbdb-define-all-aliases)))
#+end_src

I hate creating documents with spelling errors... so I use
flyspell-mode for almost everything.  I also recently discovered
yasnippets which are enabled most of my editing modes.
#+begin_src lisp
(add-hook 'org-mode-hook
	  (lambda ()
	    ;; yasnippet
	    (make-variable-buffer-local 'yas/trigger-key)
	    (setq yas/trigger-key [tab])
	    (define-key yas/keymap [tab] 'yas/next-field-group)
	    (flyspell-mode 1)))
#+end_src

** Organizing Your Life Into Org Files
   The following org files collect non-work related tasks:

   | Filename     | Description                                |
   |--------------+--------------------------------------------|
   | todo.org     | Personal tasks and things to keep track of |
   | gsoc2009.org | Google Summer of Code stuff for 2009       |
   | farm.org     | Farm related tasks                         |
   | mark.org     | Tasks related to my son Mark               |
   | org.org      | Org-mode related tasks                     |
   | git.org      | Git related tasks                          |
   | bzflag.org   | BZFlag related tasks                       | 

   The following org-files are the targets for remember notes:

   | Filename  | Description            |
   |-----------+------------------------|
   | tasks.org | New task bucket        |
   | notes.org | New notes bucket       |
   | phone.org | New phone calls bucket |

   The following work-related org-files keep my business notes (using
   fictitious client names)

   | Filename    | Description                             |
   |-------------+-----------------------------------------|
   | norang.org  | Norang tasks and notes                  |
   | XYZ.org     | XYZ Corp tasks and notes                |
   | ABC.org     | ABC Ltd tasks                           |
   | ABC-DEF.org | ABC Ltd tasks for their client DEF Corp |
   | ABC-KKK.org | ABC Ltd tasks for their client KKK Inc  |
   | YYY.org     | YYY Inc tasks                           |

   Org-mode is great for dealing with multiple clients and client
   projects.  An org file becomes the collection of projects, notes,
   etc. for a single client.

   Clients (ABC Ltd) has multiple customer systems that I
   work on.  I separate the tasks for each client-customer into
   separate org files.  Clients come and go so I can add or drop
   entire org files from my agenda to keep only what is important
   visible in agenda views.

   Other org files are used for publishing only and do not contribute to the agenda.
   See [[Publishing]] for more details.
** Agenda Setup
   Here is my current =org-agenda-files= setup.
#+begin_src lisp
(setq org-agenda-files (quote ("~/git/org/tasks.org"
			       "~/git/org/gsoc2009.org"
			       "~/git/org/farm.org" 
			       "~/git/org/mark.org"
			       "~/git/org/notes.org"
			       "~/git/org/phone.org"
			       "~/git/org/org.org"
			       "~/git/org/norang.org"
			       ; client org files removed
			       "~/git/org/git.org"
			       "~/git/org/todo.org"
			       "~/git/org/bzflag.org")))
#+end_src

   I don't manually edit the =org-agenda-files= variable - I let
   org-mode do it for me.  It is shown above formatted as a =setq= for
   clarity.  If I want to add a file to the agenda I open it up with
   =C-x C-f= (find-file) and add it to the agenda with =C-c [=.  To
   remove a file I just visit it and hit =C-c ]= and all of the tasks
   in that file are instantly removed from my agenda views until I add
   them back again.

* Tasks and States
I use the same set of TODO keywords for all of my org files.  Org-mode
lets you define TODO keywords per file.  I find it's easier to have a
standard set of TODO keywords globally so I can use the same setup in
any org file I'm working with.

** ToDo keywords
Here are my =TODO= state keywords and colour settings:

#+begin_src lisp 
(setq org-todo-keywords (quote ((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!/!)") 
				(sequence "WAITING(w@/!)" "SOMEDAY(S!)" "|" "CANCELLED(c@/!)")
				(sequence "QUOTATION(q!)" "QUOTED(Q!)" "|" "APPROVED(A@)" "EXPIRED(E@)" "REJECTED(R@)")
				(sequence "OPENPO(!)" "|" "CLOSEDPO(@)")
				(sequence "PROJECT(P)" "|" "PROJDONE(D)" "PROJCANCELLED(C)"))))

(setq org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold) 
				     ("STARTED" :foreground "blue" :weight bold)
				     ("DONE" :foreground "forest green" :weight bold)
				     ("WAITING" :foreground "orange" :weight bold)
				     ("SOMEDAY" :foreground "magenta" :weight bold)
				     ("CANCELLED" :foreground "forest green" :weight bold)
				     ("QUOTATION" :foreground "red" :weight bold)
				     ("QUOTED" :foreground "magenta" :weight bold)
				     ("APPROVED" :foreground "forest green" :weight bold)
				     ("EXPIRED" :foreground "forest green" :weight bold)
				     ("REJECTED" :foreground "forest green" :weight bold)
				     ("OPENPO" :foreground "blue" :weight bold)
				     ("CLOSEDPO" :foreground "forest green" :weight bold)
				     ("PROJECT" :foreground "red" :weight bold)
				     ("PROJDONE" :foreground "forest green" :weight bold)
				     ("PROJCANCELLED" :foreground "forest green" :weight bold))))

#+end_src
*** Normal Task States
Normal tasks go through the sequence =TODO= -> =STARTED= -> =DONE=.
The second sequence is really just a convenient collection of odd-ball
states for tasks (=WAITING=, =SOMEDAY=, =CANCELLED=).

The following diagram shows the possible state transitions for a task.

#+begin_ditaa task_states.png -r -s 0.8
:       +--------+       +---------+       +--------+
:       |        |       |         |       |        |
:    +--+  TODO  +------>+ STARTED +------>+  DONE  |
:    |  | cRED   |       |  cBLU   |       | cGRE   |
:    |  +--+-+---+       +--+---+--+       +--------+
:    |     ^ ^              ^   |
:    |     | |              |   |
:    |     | :  +------=----+   +------=------+
:    |     : +--|----=-------+                |
:    |     |    |            |                |
:    |     v    v            v                v
:    |  +--+----+-+     +----+----+     +-----+-----+
:    |  |         |     |         |     |           |
:    |  | WAITING |     | SOMEDAY |     | CANCELLED |
:    |  |   cF60  |     |  cC0C   |     |   cGRE    |
:    |  +----+----+     +---+--+--+     +-----+--+--+
:    |       ^              ^  |              ^  ^
:    |       |              |  |              |  |
:    |       +--=-----------+  +-=------------+  |
:    |                                           |
:    +---=---------------------------------------+
: 
: 
:         -------- Normal state changes
:         ----=--- Optional state changes
#+end_ditaa

*** Quotation Task States
I also do fixed-price quotation work.  Quotations use the following state transitions:

#+begin_ditaa quote_states.png -r -s 0.8
:                                              +----------+
:                                              |          |
:                                          +-->+ EXPIRED  |
:                                          |   | cGRE     |
:                                          |   +----------+
:                                          |
:                                          |
:       +-------------+       +--------+   :   +----------+
:       |             |       |        +---+   |          |
:       |  QUOTATION  +------>+ QUOTED +------>+ APPROVED |
:       | cRED        |       |  cC0C  +---+   | cGRE     |
:       +-------------+       +--+---+-+   :   +----------+
:                                          |
:                                          |
:                                          |   +----------+
:                                          |   |          |
:                                          +-->+ REJECTED |
:                                              | cGRE     |
:                                              +----------+
#+end_ditaa

*** Purchase Order Task States
Fixed price jobs normally have a =Purchase Order= associated with it which is used for billing the client.
The following states track purchase orders.

#+begin_ditaa po_states.png -r -s 0.8
:       +----------+       +---------+
:       |          |       |         |
:       |  OPENPO  +------>+ CLOSEPO |
:       | cRED     |       |  cGRE   |
:       +----------+       +---------+
#+end_ditaa

*** Project Task States
Finally I also track projects which are really super-tasks.  Projects normally have lots of individual tasks
that can be estimated and clocked.  Projects use the following state transitions:

#+begin_ditaa project_states.png -r -s 0.8
:                                 +---------------+
:                                 |               |
:                                 |    PROJDONE   |
:                                 | cGRE          |
:                                 +----+----------+
:                                      ^      
:       +-------------+                |
:       |             +----------------+
:       |   PROJECT   |
:       | cRED        +-----------=----+
:       +-------------+                |
:                                      v            
:                                 +----+----------+
:                                 |               |
:                                 | PROJCANCELLED |
:                                 | cGRE          |
:                                 +---------------+
#+end_ditaa

** Fast Todo Selection
I use fast todo selection so that moving a task from one state to
another is normally done directly with the fast selection key.

#+begin_src lisp 
(setq org-use-fast-todo-selection t)
#+end_src lisp

Changing a task state is done with 
: C-c C-t KEY

where =KEY= is the appropriate fast todo state selection key as defined in =org-todo-keywords=.
** ToDo state triggers
I have a few triggers that automatically assign tags to tasks based on
state changes.  If a task moves to =CANCELLED= state then it gets a
*CANCELLED* tag.  Moving a =CANCELLED= task back to =TODO= removes the
*CANCELLED* tag.  These are used for filtering tasks in agenda views
which I'll talk about later.

#+begin_src lisp 
(setq org-todo-state-tags-triggers (quote (("CANCELLED" ("CANCELLED" . t))
					   ("PROJCANCELLED" ("CANCELLED" . t))
					   ("WAITING" ("WAITING" . t) ("NEXT"))
					   ("SOMEDAY" ("WAITING" . t))
					   (done ("NEXT") ("WAITING"))
					   ("TODO" ("WAITING") ("CANCELLED"))
					   ("PROJECT" ("CANCELLED")))))
#+end_src lisp

*** using STARTED for clocked tasks

* Adding New Tasks Quickly with Remember
  To add new tasks efficiently I use a minimal number of remember templates.
  I used to have lots of remember templates, one for each org-file.  I'd start org-remember with
  C-M-r and then pick a template that filed the task under =* Tasks= in the appropriate file.

  I found I still needed to refile these remember tasks again to the
  correct location within the org-file so all of these different
  remember templates weren't really helping at all.  Since then I've
  changed my workflow to use a minimal number of remember templates --
  I create the new task quickly and refile it once.  This also saves
  me from maintaining my org-remember templates when I add a new org file.
** Remember Templates
   When a new task needs to be added I categorize it into one of three
   things:

   - A phone call
   - A new task
   - A new note

   and pick the appropriate remember task.

   Here is my setup for org-remember

#+begin_src lisp
;;
;;;  Load Org Remember Stuff
(require 'remember)
(org-remember-insinuate)

;; Start clock if a remember buffer includes :CLOCK-IN:
(add-hook 'remember-mode-hook 'my-start-clock-if-needed 'append)

(defun my-start-clock-if-needed ()
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward " *:CLOCK-IN: *" nil t)
      (replace-match "")
      (org-clock-in))))

;; I use C-M-r to start org-remember
(global-set-key (kbd "C-M-r") 'org-remember)

;; Keep clocks running
(setq org-remember-clock-out-on-exit nil)

;; C-c C-c stores the note immediately
(setq org-remember-store-without-prompt t)

;; I don't use this -- but set it in case I forget to specify a location in a future template
(setq org-remember-default-headline "Tasks")

;; 3 remember templates for TODO tasks, Notes, and Phone calls
(setq org-remember-templates (quote (("todo" 116 "* TODO %?
  %u
  %a" "~/git/org/tasks.org" bottom nil) ("note" 110 "* %?
  %u
  %a" nil bottom nil) ("phone" 112 "* PHONE %a - 
  %u
  :CLOCK-IN:
  %?" "~/git/org/phone.org" bottom nil))))
#+end_src

   Each type of remember note goes in a separate org file with a =#+FILETAGS:= header which gives all tasks in that
   file a tag.
** Separate files for Remember Tasks
   I have 3 org files which are targets for my remember templates:

   | Remember File | Used for       |
   |---------------+----------------|
   | notes.org     | notes          |
   | tasks.org     | new TODO tasks |
   | phone.org     | phone calls    |

   Normally these files are empty except for a single line at the top which creates tags for anything in
   the files.  The three files look like this:

*** Notes.org - Remember file for notes
#+begin_example
#+FILETAGS: NOTES REFILE
#+end_example
*** Tasks.org - Remember file for TODO tasks
#+begin_example
#+FILETAGS: REFILE
#+end_example
*** Phone.org - Remember file for clocking phone calls
#+begin_example
#+FILETAGS: PHONE REFILE
#+end_example
** Remember Tasks is all about begin FAST
   Okay I'm in the middle of something and oh yeah - I have to remember to do that.
   I don't stop what I'm doing.  I'm probably clocking a project I'm working on and I don't want to
   lose my focus on that but I can't afford to forget this little thing that just came up.

   So what do I do?  Hit =C-M-r= to start remember mode and select =t= since it's a new task and I get a buffer like this
#+begin_example OPTIONS
 ##     C-c C-c  "~/git/org/tasks.org" -> "* bottom"
 ## C-u C-c C-c  like C-c C-c, and immediately visit note at target location
 ## C-0 C-c C-c  "???" -> "* ???"
 ## C-1 C-c C-c  to select file and header location interactively.
 ## C-2 C-c C-c  as child of the currently clocked item
 ## To switch templates, use `C-M-r'.  To abort use `C-c C-k'.

 * TODO 
   [2009-04-19 Sun]
   [[file:~/git/doc.norang.ca/org-mode.org::*Remember%20Tasks%20is%20all%20about%20begin%20FAST][file:~/git/doc.norang.ca/org-mode.org::*Remember Tasks is all about begin FAST]]
#+end_example

   Enter the details of the TODO item and =C-c C-c= to file it away in tasks.org and go right back
   to what I'm really working on secure in the knowledge that that item isn't going to get lost and 
   I don't have to think about it anymore at all now.
* Refiling Tasks
  Refiling tasks is easy.  After collecting a bunch of new tasks in my
  tasks.org file using remember mode I need to move these to the
  correct org file and topic.  All of my active org-files are in my
  =org-agenda-files= variable and contribute to the agenda.

  I'll collect tasks in my remember org files (tasks.org, phone.org,
  notes.org) for up to a week.  Often I end up refiling tasks the same
  day I create them because they show up in my daily clock report
  summary and are obviously in the wrong place.  If I have multiple
  tasks that should be refiled to the same org file and task I reorder
  the tasks so they are next to each other, highlight the group, and
  refile to the target file and task.

** Refile Setup
   To refile tasks in org you need to tell it where you want to refile things.

   In my setup I let any file in =org-agenda-files= and the current file contribute to the list of valid refile targets.
   I don't refile to tasks more then 5 levels deep just to limit the number of displayed targets.
   I also use ido to help find targets quickly.

   Here is my refile configuration:
#+begin_src lisp
(setq org-completion-use-ido t)
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))
(setq org-refile-use-outline-path (quote file))
#+end_src

   To refile a task to my =norang.org= file under =System Maintenance=
   I just put the cursor on the task and hit =C-c C-w= and enter =nor
   TAB sys TAB RET= and it's done.  I always know what file it's going
   into but if I don't remember the exact task name I can just hit TAB
   twice and all remember targets that match show up in a list.  Just
   scroll through the list and pick the right refile target.  This
   works great!
* Custom agenda views
** use agenda view for STARTED to find stuff in progress and things to clock
** use priorities to sort STARTED tasks so it's easy to find often used ongoing tasks
** Filtering
* Time Clocking
  Okay, I admit it.  I'm a clocking fanatic.

  I clock everything (well almost everything).  Org-mode makes this
  really easy.  I'd rather clock too much stuff than not enough so I
  find it's easier to get in the habit of clocking everything.

  This is where the =STARTED= todo task comes in to play.
** Clock Setup
   I like to keep control of the clock separate from task changes.  If
   I mark a clocked task =DONE= I want to clock to keep running on
   that task until I've finished all of the work on it.  I tend to
   mark tasks =DONE= just before I'm really finished with it.  If I
   need to enter a note with the =DONE= state change then it may take
   a few minutes to get all of the details entered -- and this counts
   towards clocking on that task.

   I have the following org-mode setup for clocking:

#+begin_src lisp
;;
;; Resume clocking tasks when emacs is restarted
(setq org-clock-persistence-insinuate)
;;
(setq org-clock-history-length 35)
(setq org-clock-in-resume t)
(setq org-clock-in-switch-to-state "STARTED")
(setq org-clock-into-drawer t)
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-out-when-done nil)
(setq org-clock-persist t)
(setq org-agenda-clockreport-parameter-plist (quote (:link nil :maxlevel 3)))
(setq org-agenda-log-mode-items (quote (clock)))
#+end_src
** Clocking in
  When I start working on a task I clock it in with =C-c C-x C-i= (or
  just =I= in the agenda).  This changes the task state to =STARTED=
  and starts the clock.

*** Using the clock history
*** Setting a default clock task
** Setting default task with C-u C-u C-c C-x C-i
** Clocking in old tasks C-u C-c C-x C-i
** Make tasks to respond to emails
** Create new tasks and clock in when starting something new
** Time reporting and tracking
*** Finding tasks to clock in
    - Use the clock history
    - STARTED/ONGOING tasks (agenda view)
*** Checking for holes in clocked times
    - agenda log mode with clocked times as default
* Tags, Filetags
* Key bindings
  I have the following custom key bindings set up for my emacs.
#+end_example


| Key     | For                                             | Used       |
|---------+-------------------------------------------------+------------|
| C-c l   | Store a link for retrieval with C-c C-l         | Frequently |
| C-c a   | Enter Agenda                                    | Rare       |
| C-c b   | Switch to org file                              | Frequently |
| f5      | Show todo items for this subtree                | Sometimes  |
| f7      | Toggle line truncation/wrap                     | Rare       |
| f8      | Go to next org file in org-agenda-files         | Sometimes  |
| f9 b    | Quick access to bbdb data                       | Often      |
| f9 c    | Calendar access                                 | Often      |
| f9 f    | Boxquote insert a file                          | Sometimes  |
| f9 g    | Gnus - I live in gnus                           | Frequently |
| f9 i    | Org-mode Info manual                            | Sometimes  |
| f9 o    | Org occur search                                | Rare       |
| f9 r    | Boxquote selected region                        | Often      |
| f9 u    | Untabify region                                 | Rare       |
| f9 v    | Toggle visible mode (for showing/editing links) | Sometimes  |
| C-f9    | Previous buffer                                 | Sometimes  |
| C-f10   | Next buffer                                     | Sometimes  |
| C-M-r   | Create a remember task                          | Often      |
| F12     | Agenda (1 key less than C-c a)                  | Often      |
| F11     | Goto currently clocked item                     | Often      |
| C-S-f12 | Save buffers and publish current project        | Often      |
| C-x n r | Narrow to region                                | Sometimes  |

#+begin_src lisp
;; Custom Key Bindings
(global-set-key (kbd "<f5>") 'my-org-todo)
(global-set-key (kbd "<f7>") 'set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> i") (lambda () (interactive) (info "~/git/org-mode/doc/org.info")))
(global-set-key (kbd "<f9> o") 'org-occur)
(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> u") (lambda () (interactive) (untabify (point-min) (point-max))))
(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-s-<f12>") 'my-save-then-publish)
#+end_src

* GTD stuff
** weekly review process
*** sorting REFILE tasks and refiling in groups
* Archiving
* Publishing
  :PROPERTIES:
  :CUSTOM_ID: Publishing
  :END:

** Playing with ditaa

I don't do a lot of publishing for other people but I do keep a set of private client system documentation online.
Most of this documentation is a collection of notes exported to HTML.  ditaa is a great tool for quickly generating
graphics to convey ideas.  The following graphic is one example of what you can do easily with ditaa:

This

#+begin_example
 #+begin_ditaa communication.png -r -s 0.8
 :      +-----------+        +---------+  
 :      |    PLC    |        |         |                
 :      |  Network  +<------>+   PLC   +<---=---------+ 
 :      |    cRED   |        |  c707   |              | 
 :      +-----------+        +----+----+              | 
 :                                ^                   | 
 :                                |                   | 
 :                                |  +----------------|-----------------+
 :                                |  |                |                 |
 :                                v  v                v                 v
 :        +----------+       +----+--+--+      +-------+---+      +-----+-----+      Windows clients
 :        |          |       |          |      |           |      |           |      +----+   +----+
 :        | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL|...|cYEL|
 :        |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |   |    |
 :        +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+   +----+
 :           ^    ^          +----------+             ^           +-------+---+
 :           |    |                                   |                        
 :           |    +--------=--------------------------+                    
 :           v                                                             
 :  +--------+--------+                                                         
 :  |                 |                                                         
 :  | Millwide System |            -------- Data ---------                      
 :  | cBLU            |            --=----- Signals ---=--                      
 :  +-----------------+                                                         
 #+end_ditaa
#+end_example

becomes this!

#+begin_ditaa communication.png -r -s 0.8
:      +-----------+        +---------+  
:      |    PLC    |        |         |                
:      |  Network  +<------>+   PLC   +<---=---------+ 
:      |    cRED   |        |  c707   |              | 
:      +-----------+        +----+----+              | 
:                                ^                   | 
:                                |                   | 
:                                |  +----------------|-----------------+
:                                |  |                |                 |
:                                v  v                v                 v
:        +----------+       +----+--+--+      +-------+---+      +-----+-----+      Windows clients
:        |          |       |          |      |           |      |           |      +----+   +----+
:        | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL|...|cYEL|
:        |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |   |    |
:        +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+   +----+
:           ^    ^          +----------+             ^           +-------+---+
:           |    |                                   |                        
:           |    +--------=--------------------------+                    
:           v                                                             
:  +--------+--------+                                                         
:  |                 |                                                         
:  | Millwide System |            -------- Data ---------                      
:  | cBLU            |            --=----- Signals ---=--                      
:  +-----------------+                                                         
#+end_ditaa


#+ Local Variables:
#+ org-export-latex-title-command: ""
#+ org-export-latex-append-header: "\
#+ \\usepackage{graphicx}
#+ \\usepackage{multicol}
#+ \\geometry{headheight=47pt}
#+ \\fancyhead[L]{\\LARGE Org-Mode - Organize Your Life!}
#+ \\fancyfoot[L]{\\small org-mode.org}
#+ \\fancyfoot[R]{\\today}
#+ "
#+ End:
* Temporary Section to be deleted
** What I put in my .emacs
#+begin_src lisp
(defun my-org-todo ()
  (interactive)
  (org-narrow-to-subtree)
  (org-show-todo-tree nil)
  (widen))

(defun my-org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

(add-hook 'org-finalize-agenda-hook 'my-org-agenda-to-appt)
(my-org-agenda-to-appt)
(appt-activate t)
(run-at-time "24:01" nil 'my-org-agenda-to-appt)
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
;;
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")
;;
(defun my-save-then-publish ()
  (interactive)
  (save-buffer)
  (org-save-all-org-buffers)
  (org-publish-current-project))

(add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))

(add-hook 'grb-todo-mode-hook
	  (lambda ()
	    ;; yasnippet
	    (make-variable-buffer-local 'yas/trigger-key)
	    (setq yas/trigger-key [tab])
	    (define-key yas/keymap [tab] 'grb-todo-cycle-commands)))
;;

(load "~/git/org-mode/contrib/lisp/org-exp-blocks")
(setq org-ditaa-jar-path "~/java/ditaa0_6b.jar")

(load "~/git/org-mode/contrib/lisp/org-checklist")

(setq backup-inhibited t)

(setq org-publish-project-alist
      (quote (("norang-org"
	       :base-directory "~/git/www.norang.ca"
	       :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
	       :recursive t
	       :section_numbers nil
	       :table-of-contents nil
	       :base-extension "org"
	       :publishing-function org-publish-org-to-html
	       :style-include-default nil
	       :section-numbers nil
	       :table-of-contents nil
	       :style-include-default nil
	       :style "<link rel=\"stylesheet\" href=\"norang.css\" type=\"text/css\">"
	       :author-info nil
	       :creator-info nil)
	      ("norang-extra"
	       :base-directory "~/git/www.norang.ca/"
	       :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
	       :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
	       :publishing-function org-publish-attachment
	       :recursive t
	       :author nil)
	      ("norang"
	       :components ("norang-org" "norang-extra"))
	      ("doc-org"
	       :base-directory "~/git/doc.norang.ca/"
	       :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
	       :recursive t
	       :section_numbers nil
	       :table-of-contents nil
	       :base-extension "org"
	       :publishing-function org-publish-org-to-html
	       :style-include-default nil
	       :style "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\">"
	       :author-info nil
	       :creator-info nil)
	      ("doc-extra"
	       :base-directory "~/git/doc.norang.ca/"
	       :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
	       :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
	       :publishing-function org-publish-attachment
	       :recursive t
	       :author nil)
	      ("org"
	       :base-directory "~/git/org/"
	       :publishing-directory "/ssh:www-data@www:~/org"
	       :recursive t
	       :section_numbers nil
	       :table-of-contents nil
	       :base-extension "org"
	       :publishing-function org-publish-org-to-html
	       :style-include-default nil
	       :style "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\">"
	       :author-info nil
	       :creator-info nil)
	      ("doc"
	       :components ("doc-org" "doc-extra")))))

#+end_src lisp

** What goes in my custom.el
The following is an excerpt of my custom settings for org-mode related items.

#+begin_src lisp 
 '(org-agenda-custom-commands (quote (("p" "Projects" tags "/!PROJECT" ((org-use-tag-inheritance nil))) ("o" "Started tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil))) ("s" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil))) ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil))) ("r" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil))) ("x" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil))) ("2" "Level 2 tasks" tags "LEVEL=2/-DONE-CANCELLED" nil) ("n" "Notes" tags "NOTES" nil))))
 '(org-agenda-include-diary t)
 '(org-agenda-repeating-timestamp-show-all t)
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-sorting-strategy (quote ((agenda time-up priority-down effort-up category-up) (todo priority-down) (tags priority-down))))
 '(org-agenda-start-on-weekday nil)
 '(org-agenda-tags-todo-honor-ignore-options t)
 '(org-agenda-text-search-extra-files (quote (agenda-archives)))
 '(org-agenda-time-grid (quote ((daily weekly today require-timed remove-match) "----------------" (800 1000 1200 1400 1600 1800 2000))))
 '(org-agenda-todo-ignore-with-date t)
 '(org-blank-before-new-entry (quote ((heading) (plain-list-item))))
 '(org-columns-default-format "%40ITEM(Task) %17Quoted(Quoted) %17Effort(Estimated Effort){:} %CLOCKSUM")
 '(org-cycle-include-plain-lists nil)
 '(org-cycle-separator-lines 0)
 '(org-deadline-warning-days 30)
 '(org-default-notes-file "~/git/org/notes.org")
 '(org-default-priority 71)
 '(org-enforce-todo-dependencies t)
 '(org-export-docbook-xsl-fo-proc-command "fop %s %s")
 '(org-export-docbook-xslt-proc-command "xsltproc --output %s /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s")
 '(org-export-html-inline-images t)
 '(org-export-latex-classes (quote (("myletter" "% BEGIN My Letter Defaults
\\documentclass[10pt,letterpaper]{letter}
\\usepackage[letterpaper,includeheadfoot,top=0.5in,bottom=0.5in,left=0.75in,right=0.75in]{geometry}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{hyperref}
\\usepackage{lastpage}
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\renewcommand{\\footrulewidth}{0.5pt}

% Default footer
\\fancyfoot[C]{\\small Page \\thepage\\ of \\pageref{LastPage}}
% END My Letter Defaults

" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("myarticle" "% BEGIN My Article Defaults
\\documentclass[10pt,letterpaper]{article}
\\usepackage[letterpaper,includeheadfoot,top=0.5in,bottom=0.5in,left=0.75in,right=0.75in]{geometry}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{hyperref}
\\usepackage{lastpage}
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\renewcommand{\\headrulewidth}{1pt}
\\renewcommand{\\footrulewidth}{0.5pt}

% Default footer
\\fancyfoot[L]{\\small \\jobname \\\\ \\today}
\\fancyfoot[C]{\\small Page \\thepage\\ of \\pageref{LastPage}}
\\fancyfoot[R]{\\small \\copyright \\the\\year\\  Norang Consulting Inc.}
% END My Article Defaults

" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("article" "\\documentclass[11pt,letterpaper]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{hyperref}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("report" "\\documentclass[11pt,letterpaper]{report}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{hyperref}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("book" "\\documentclass[11pt,letterpaper]{book}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{hyperref}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
 '(org-export-with-sub-superscripts nil)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 8:00"))))
 '(org-hide-leading-stars t)
 '(org-id-method (quote uuidgen))
 '(org-insert-heading-respect-content t)
 '(org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame) (gnus . gnus-other-frame) (file . find-file-other-window))))
 '(org-log-done (quote time))
 '(org-log-into-drawer t)
 '(org-lowest-priority 71)
 '(org-odd-levels-only nil)
 '(org-outline-path-complete-in-steps nil)
 '(org-return-follows-link nil)
 '(org-reverse-note-order nil)
 '(org-show-following-heading t)
 '(org-show-hierarchy-above t)
 '(org-show-siblings nil)
 '(org-special-ctrl-a/e t)
 '(org-special-ctrl-k t)
 '(org-stuck-projects (quote ("/PROJECT" nil ("NEXT") "")))
 '(org-table-export-default-format "orgtbl-to-csv")
 '(org-tag-alist (quote ((:startgroup) (#("@InTown" 0 7 (face nil)) . 116) (#("@Work" 0 5 (face nil)) . 119) (#("@Home" 0 5 (face nil)) . 104) (#("@Farm" 0 5 (face org-todo)) . 102) (#("@Play" 0 5 (face nil)) . 112) (:endgroup) (#("BUY" 0 3 (face nil)) . 98) (#("QUOTE" 0 5 (face nil)) . 113) (#("NEXT" 0 4 (face nil)) . 78) (#("GSOC" 0 4 (face nil)) . 103))))
 '(org-time-stamp-rounding-minutes (quote (1 5)))
 '(org-yank-adjusted-subtrees t)
#+end_src lisp

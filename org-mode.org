#+TITLE: Org Mode - Organize Your Life!
#+LANGUAGE:  en
#+AUTHOR: Bernt Hansen
#+EMAIL: bernt@norang.ca
#+OPTIONS:   H:2 num:t   toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+DATE:      2009-04-15 Wed
#+DESCRIPTION: A description of how I currently use org-mode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
* Overview
This document attempts to describe how I use org-mode in my day-to-day work.

This is currently a work-in-progress.

* TODO Tasks
** TODO My todo keywords
   - globally set for all files
*** TODO using STARTED for clocked tasks
** TODO Estimates
* TODO Time Clocking
  - Clock time religiously
** TODO setting default task with C-u C-u C-c C-x C-i
** TODO clocking in old tasks C-u C-c C-x C-i
** TODO Clocking in
*** TODO Using the clock history
*** TODO Setting a default clock task
** TODO Make tasks to respond to emails
** TODO Create new tasks and clock in when starting something new
** TODO Time reporting and tracking
*** TODO Finding tasks to clock in
    - Use the clock history
    - STARTED/ONGOING tasks (agenda view)
*** TODO checking for holes in clocked times
    - agenda log mode with clocked times as default
* TODO Tags, Filetags
* TODO Custom agenda views
** TODO use agenda view for STARTED to find stuff in progress and things to clock
** TODO use priorities to sort STARTED tasks so it's easy to find often used ongoing tasks
** TODO Filtering
* TODO Key bindings
  I have the following custom key bindings set up for my emacs.  All
  of the raw settings are in [[AllTheGorySetupDetails][All The Gory Setup Details]] below.

| Key     | For                                             | Used       |
|---------+-------------------------------------------------+------------|
| C-c l   | Store a link for retrieval with C-c C-l         | Frequently |
| C-c a   | Enter Agenda                                    | Rare       |
| C-c b   | Switch to org file                              | Frequently |
| f5      | Show todo items for this subtree                | Sometimes  |
| f7      | Toggle line truncation/wrap                     | Rare       |
| f8      | Go to next org file in org-agenda-files         | Sometimes  |
| f9 b    | Quick access to bbdb data                       | Often      |
| f9 c    | Calendar access                                 | Often      |
| f9 f    | Boxquote insert a file                          | Sometimes  |
| f9 g    | Gnus - I live in gnus                           | Frequently |
| f9 i    | Org-mode Info manual                            | Sometimes  |
| f9 o    | Org occur search                                | Rare       |
| f9 r    | Boxquote selected region                        | Often      |
| f9 u    | Untabify region                                 | Rare       |
| f9 v    | Toggle visible mode (for showing/editing links) | Sometimes  |
| C-f9    | Previous buffer                                 | Sometimes  |
| C-f10   | Next buffer                                     | Sometimes  |
| C-M-r   | Create a remember task                          | Often      |
| F12     | Agenda (1 key less than C-c a)                  | Often      |
| F11     | Goto currently clocked item                     | Often      |
| C-S-f12 | Save buffers and publish current project        | Often      |
| C-x n r | Narrow to region                                | Sometimes  |
* TODO Adding new tasks quickly - org remember
** TODO Use separate files for remember tasks (tasks,org, notes.org, phone.org)
** TODO Remember tasks for phone calls and bbdb searches
* TODO GTD stuff
** TODO weekly review process
*** TODO sorting REFILE tasks and refiling in groups
* Publishing

** Playing with ditaa

I don't do a lot of publishing for other people but I do keep a set of private client system documentation online.
Most of this documentation is a collection of notes exported to HTML.  ditaa is a great tool for quickly generating
graphics to convey ideas.  The following graphic is one example of what you can do easily with ditaa:

This

#+begin_example
 :      +-----------+        +---------+  
 :      |    PLC    |        |         |                
 :      |  Network  +<------>+   PLC   +<---=---------+ 
 :      |    cRED   |        |  c707   |              | 
 :      +-----------+        +----+----+              | 
 :                                ^                   | 
 :                                |                   | 
 :                                |  +----------------|-----------------+
 :                                |  |                |                 |
 :                                v  v                v                 v
 :        +----------+       +----+--+--+      +-------+---+      +-----+-----+      Windows clients
 :        |          |       |          |      |           |      |           |      +----+   +----+
 :        | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL|...|cYEL|
 :        |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |   |    |
 :        +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+   +----+
 :           ^    ^          +----------+             ^           +-------+---+
 :           |    |                                   |                        
 :           |    +--------=--------------------------+                    
 :           v                                                             
 :  +--------+--------+                                                         
 :  |                 |                                                         
 :  | Millwide System |            -------- Data ---------                      
 :  | cBLU            |            --=----- Signals ---=--                      
 :  +-----------------+                                                         
#+end_example

becomes this!

#+begin_ditaa communication.png -r -S
:      +-----------+        +---------+  
:      |    PLC    |        |         |                
:      |  Network  +<------>+   PLC   +<---=---------+ 
:      |    cRED   |        |  c707   |              | 
:      +-----------+        +----+----+              | 
:                                ^                   | 
:                                |                   | 
:                                |  +----------------|-----------------+
:                                |  |                |                 |
:                                v  v                v                 v
:        +----------+       +----+--+--+      +-------+---+      +-----+-----+      Windows clients
:        |          |       |          |      |           |      |           |      +----+   +----+
:        | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL|...|cYEL|
:        |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |   |    |
:        +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+   +----+
:           ^    ^          +----------+             ^           +-------+---+
:           |    |                                   |                        
:           |    +--------=--------------------------+                    
:           v                                                             
:  +--------+--------+                                                         
:  |                 |                                                         
:  | Millwide System |            -------- Data ---------                      
:  | cBLU            |            --=----- Signals ---=--                      
:  +-----------------+                                                         
#+end_ditaa


#+ Local Variables:
#+ org-export-latex-title-command: ""
#+ org-export-latex-append-header: "\
#+ \\usepackage{graphicx}
#+ \\usepackage{multicol}
#+ \\geometry{headheight=47pt}
#+ \\fancyhead[L]{\\LARGE Org-Mode - Organize Your Life!}
#+ \\fancyfoot[L]{\\small org-mode.org}
#+ \\fancyfoot[R]{\\today}
#+ "
#+ End:
* TODO All The Gory Setup Details
#!<<AllTheGorySetupDetails>>
** TODO What I put in my .emacs
#+begin_src lisp
;;;
;;; Org Mode
;;;
(add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org-install)
;;
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
;;
(defun my-org-todo ()
  (interactive)
  (org-narrow-to-subtree)
  (org-show-todo-tree nil)
  (widen))

(add-hook 'remember-mode-hook 'my-start-clock-if-needed 'append)

(defun my-start-clock-if-needed ()
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward " *:CLOCK-IN: *" nil t)
      (replace-match "")
      (org-clock-in))))

;; Custom Key Bindings
(global-set-key (kbd "<f5>") 'my-org-todo)

(global-set-key (kbd "<f7>") 'set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> i") (lambda () (interactive) (info "~/git/org-mode/doc/org.info")))
(global-set-key (kbd "<f9> o") 'org-occur)
(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> u") (lambda () (interactive) (untabify (point-min) (point-max))))
(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-s-<f12>") 'my-save-then-publish)
(global-set-key (kbd "C-M-r") 'org-remember)
;;
;;;  New Org mode stuff
(require 'remember)

(defun my-org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

(add-hook 'org-finalize-agenda-hook 'my-org-agenda-to-appt)
(my-org-agenda-to-appt)
(appt-activate t)
(run-at-time "24:01" nil 'my-org-agenda-to-appt)
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
;;
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")
;;
(defun my-save-then-publish ()
  (interactive)
  (save-buffer)
  (org-save-all-org-buffers)
  (org-publish-current-project))

(add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))

(add-hook 'org-mode-hook
	  (lambda ()
	    ;; yasnippet
	    (make-variable-buffer-local 'yas/trigger-key)
	    (setq yas/trigger-key [tab])
	    (define-key yas/keymap [tab] 'yas/next-field-group)
	    (flyspell-mode 1)))
(add-hook 'grb-todo-mode-hook
	  (lambda ()
	    ;; yasnippet
	    (make-variable-buffer-local 'yas/trigger-key)
	    (setq yas/trigger-key [tab])
	    (define-key yas/keymap [tab] 'grb-todo-cycle-commands)))
;;
(org-clock-persistence-insinuate)
(org-remember-insinuate)

(load "~/git/org-mode/contrib/lisp/org-exp-blocks")
(setq org-ditaa-jar-path "~/java/ditaa0_6b.jar")

(load "~/git/org-mode/contrib/lisp/org-checklist")

(setq backup-inhibited t)

(setq org-publish-project-alist
      (quote (("norang-org"
	       :base-directory "~/git/www.norang.ca"
	       :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
	       :recursive t
	       :section_numbers nil
	       :table-of-contents nil
	       :base-extension "org"
	       :publishing-function org-publish-org-to-html
	       :style-include-default nil
	       :section-numbers nil
	       :table-of-contents nil
	       :style-include-default nil
	       :style "<link rel=\"stylesheet\" href=\"norang.css\" type=\"text/css\">"
	       :author-info nil
	       :creator-info nil)
	      ("norang-extra"
	       :base-directory "~/git/www.norang.ca/"
	       :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
	       :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
	       :publishing-function org-publish-attachment
	       :recursive t
	       :author nil)
	      ("norang"
	       :components ("norang-org" "norang-extra"))
	      ("doc-org"
	       :base-directory "~/git/doc.norang.ca/"
	       :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
	       :recursive t
	       :section_numbers nil
	       :table-of-contents nil
	       :base-extension "org"
	       :publishing-function org-publish-org-to-html
	       :style-include-default nil
	       :style "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\">"
	       :author-info nil
	       :creator-info nil)
	      ("doc-extra"
	       :base-directory "~/git/doc.norang.ca/"
	       :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
	       :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
	       :publishing-function org-publish-attachment
	       :recursive t
	       :author nil)
	      ("org"
	       :base-directory "~/git/org/"
	       :publishing-directory "/ssh:www-data@www:~/org"
	       :recursive t
	       :section_numbers nil
	       :table-of-contents nil
	       :base-extension "org"
	       :publishing-function org-publish-org-to-html
	       :style-include-default nil
	       :style "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\">"
	       :author-info nil
	       :creator-info nil)
	      ("doc"
	       :components ("doc-org" "doc-extra")))))

#+end_src lisp

** TODO What goes in my custom.el
The following is an excerpt of my custom settings for org-mode related items.

#+begin_src lisp 
 '(org-agenda-clockreport-parameter-plist (quote (:link nil :maxlevel 3)))
 '(org-agenda-custom-commands (quote (("p" "Projects" tags "/!PROJECT" ((org-use-tag-inheritance nil))) ("o" "Started tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil))) ("s" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil))) ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil))) ("r" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil))) ("x" "Refile New Notes and Tasks" tags "REFILE" ((org-agenda-todo-ignore-with-date nil))) ("2" "Level 2 tasks" tags "LEVEL=2/-DONE-CANCELLED" nil) ("n" "Notes" tags "NOTES" nil))))
 '(org-agenda-files (quote ("~/git/org/tasks.org" "~/git/org/gsoc2009.org" "~/git/org/farm.org" "~/git/org/mark.org" "~/git/org/notes.org" "~/git/org/phone.org" "~/git/org/org.org" "~/git/org/norang.org" "~/git/org/git.org" "~/git/org/todo.org" "~/git/org/bzflag.org")))
 '(org-agenda-include-diary t)
 '(org-agenda-log-mode-items (quote (clock)))
 '(org-agenda-repeating-timestamp-show-all t)
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-sorting-strategy (quote ((agenda time-up priority-down effort-up category-up) (todo priority-down) (tags priority-down))))
 '(org-agenda-start-on-weekday nil)
 '(org-agenda-tags-todo-honor-ignore-options t)
 '(org-agenda-text-search-extra-files (quote (agenda-archives)))
 '(org-agenda-time-grid (quote ((daily weekly today require-timed remove-match) "----------------" (800 1000 1200 1400 1600 1800 2000))))
 '(org-agenda-todo-ignore-with-date t)
 '(org-blank-before-new-entry (quote ((heading) (plain-list-item))))
 '(org-clock-history-length 36)
 '(org-clock-in-resume nil)
 '(org-clock-in-switch-to-state "STARTED")
 '(org-clock-into-drawer t)
 '(org-clock-out-remove-zero-time-clocks t)
 '(org-clock-out-when-done t)
 '(org-clock-persist t)
 '(org-columns-default-format "%40ITEM(Task) %17Quoted(Quoted) %17Effort(Estimated Effort){:} %CLOCKSUM")
 '(org-completion-use-ido t)
 '(org-cycle-include-plain-lists nil)
 '(org-cycle-separator-lines 0)
 '(org-deadline-warning-days 30)
 '(org-default-notes-file "~/git/org/notes.org")
 '(org-default-priority 71)
 '(org-enforce-todo-dependencies t)
 '(org-export-docbook-xsl-fo-proc-command "fop %s %s")
 '(org-export-docbook-xslt-proc-command "xsltproc --output %s /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl %s")
 '(org-export-html-inline-images t)
 '(org-export-latex-classes (quote (("myletter" "% BEGIN My Letter Defaults
\\documentclass[10pt,letterpaper]{letter}
\\usepackage[letterpaper,includeheadfoot,top=0.5in,bottom=0.5in,left=0.75in,right=0.75in]{geometry}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{hyperref}
\\usepackage{lastpage}
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\renewcommand{\\footrulewidth}{0.5pt}

% Default footer
\\fancyfoot[C]{\\small Page \\thepage\\ of \\pageref{LastPage}}
% END My Letter Defaults

" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("myarticle" "% BEGIN My Article Defaults
\\documentclass[10pt,letterpaper]{article}
\\usepackage[letterpaper,includeheadfoot,top=0.5in,bottom=0.5in,left=0.75in,right=0.75in]{geometry}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{hyperref}
\\usepackage{lastpage}
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\renewcommand{\\headrulewidth}{1pt}
\\renewcommand{\\footrulewidth}{0.5pt}

% Default footer
\\fancyfoot[L]{\\small \\jobname \\\\ \\today}
\\fancyfoot[C]{\\small Page \\thepage\\ of \\pageref{LastPage}}
\\fancyfoot[R]{\\small \\copyright \\the\\year\\  Norang Consulting Inc.}
% END My Article Defaults

" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("article" "\\documentclass[11pt,letterpaper]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{hyperref}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("report" "\\documentclass[11pt,letterpaper]{report}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{hyperref}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("book" "\\documentclass[11pt,letterpaper]{book}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{hyperref}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
 '(org-export-with-sub-superscripts nil)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 8:00"))))
 '(org-hide-leading-stars t)
 '(org-id-method (quote uuidgen))
 '(org-insert-heading-respect-content t)
 '(org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame) (gnus . gnus-other-frame) (file . find-file-other-window))))
 '(org-log-done (quote time))
 '(org-log-into-drawer t)
 '(org-lowest-priority 71)
 '(org-odd-levels-only nil)
 '(org-outline-path-complete-in-steps nil)
 '(org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))
 '(org-refile-use-outline-path (quote file))
 '(org-remember-clock-out-on-exit nil)
 '(org-remember-default-headline "Tasks")
 '(org-remember-store-without-prompt t)
 '(org-remember-templates (quote (("todo" 116 "* TODO %?
  %u
  %a" "~/git/org/tasks.org" bottom nil) ("note" 110 "* %?
  %u
  %a" nil bottom nil) ("phone" 112 "* PHONE %a - 
  %u
  :CLOCK-IN:
  %?" "~/git/org/phone.org" bottom nil))))
 '(org-return-follows-link nil)
 '(org-reverse-note-order nil)
 '(org-show-following-heading t)
 '(org-show-hierarchy-above t)
 '(org-show-siblings nil)
 '(org-special-ctrl-a/e t)
 '(org-special-ctrl-k t)
 '(org-stuck-projects (quote ("/PROJECT" nil ("NEXT") "")))
 '(org-table-export-default-format "orgtbl-to-csv")
 '(org-tag-alist (quote ((:startgroup) (#("@InTown" 0 7 (face nil)) . 116) (#("@Work" 0 5 (face nil)) . 119) (#("@Home" 0 5 (face nil)) . 104) (#("@Farm" 0 5 (face org-todo)) . 102) (#("@Play" 0 5 (face nil)) . 112) (:endgroup) (#("BUY" 0 3 (face nil)) . 98) (#("QUOTE" 0 5 (face nil)) . 113) (#("NEXT" 0 4 (face nil)) . 78) (#("GSOC" 0 4 (face nil)) . 103))))
 '(org-time-stamp-rounding-minutes (quote (1 5)))
 '(org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold) ("STARTED" :foreground "blue" :weight bold) ("DONE" :foreground "forest green" :weight bold) ("WAITING" :foreground "orange" :weight bold) ("ONGOING" :foreground "blue" :weight bold) ("SOMEDAY" :foreground "magenta" :weight bold) ("CANCELLED" :foreground "forest green" :weight bold) ("QUOTATION" :foreground "red" :weight bold) ("QUOTED" :foreground "magenta" :weight bold) ("APPROVED" :foreground "forest green" :weight bold) ("EXPIRED" :foreground "forest green" :weight bold) ("REJECTED" :foreground "forest green" :weight bold) ("OPENPO" :foreground "blue" :weight bold) ("CLOSEDPO" :foreground "forest green" :weight bold) ("PROJECT" :foreground "red" :weight bold) ("PROJDONE" :foreground "forest green" :weight bold) ("PROJCANCELLED" :foreground "forest green" :weight bold))))
 '(org-todo-keywords (quote ((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!/!)") (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "ONGOING(o)" "|" "CANCELLED(c@/!)") (sequence "QUOTATION(q!)" "QUOTED(Q!)" "|" "APPROVED(A@)" "EXPIRED(E@)" "REJECTED(R@)") (sequence "OPENPO(!)" "|" "CLOSEDPO(@)") (sequence "PROJECT(P)" "|" "PROJDONE(D)" "PROJCANCELLED(C)"))))
 '(org-todo-state-tags-triggers (quote (("CANCELLED" ("CANCELLED" . t)) ("WAITING" ("WAITING" . t) ("NEXT")) ("SOMEDAY" ("WAITING" . t)) (done ("NEXT") ("WAITING")) ("TODO" ("WAITING") ("CANCELLED")))))
 '(org-use-fast-todo-selection t)
 '(org-yank-adjusted-subtrees t)
#+end_src lisp
